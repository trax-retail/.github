# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
on:
  workflow_call:
    inputs:
      tf_working_directory:
        required: false
        type: string
        default: 'terraform/remote/'
      tf_workspace:
        required: false
        type: string
      checkout_ref:
        required: false
        type: string
        default: ''
      do_apply:
        required: false
        type: boolean
        default: false
    secrets:
      tf-api-token:
        required: true
      github-token:
        required: true

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ inputs.tf_workspace }}

    defaults:
      run:
        working-directory: ${{ inputs.tf_working_directory }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ inputs.checkout_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.tf-api-token }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        if: steps.fmt.outcome == 'success'
        run: terraform init
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        if: steps.init.outcome == 'success'
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        if: inputs.do_apply == false && steps.validate.outcome == 'success'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Comment PR
        uses: trax-retail/.github/.github/actions/publish-terraform-report@1.12
        if: github.event_name == 'pull_request'
        with:
          fmt-outcome: ${{ steps.fmt.outcome }}
          init-outcome: ${{ steps.init.outcome }}
          validate-outcome: ${{ steps.validate.outcome }}
          plan-outcome: ${{ steps.plan.outcome }}
          validate-stdout: ${{ steps.validate.outputs.stdout }}
          plan-stdout: ${{ steps.plan.outputs.stdout }}
          github-token: ${{ secrets.github-token }}

      - name: Terraform Outcome Status
        if: steps.validate.outcome != 'success' || (inputs.do_apply == false && steps.plan.outcome != 'success')
        run: exit 1

      - name: Terraform Apply
        if: inputs.do_apply == true
        run: terraform apply -auto-approve