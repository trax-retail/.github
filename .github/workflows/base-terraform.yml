on:
  workflow_call:
    inputs:
      tf_workspace:
        required: true
        type: string
      tf_working_directory:
        required: false
        type: string
        default: 'terraform/remote/'
      checkout_ref:
        required: false
        type: string
    secrets:
      tf-api-token:
        required: true
      github-token:
        required: true

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ inputs.tf_workspace }}

    defaults:
      run:
        working-directory: ${{ inputs.tf_working_directory }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ inputs.checkout_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.tf-api-token }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        if: steps.fmt.outcome == 'success'
        run: terraform init
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        if: steps.init.outcome == 'success'
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' && steps.validate.outcome == 'success'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Outcome Status
        if: steps.validate.outcome != 'success' || (github.event_name == 'pull_request' && steps.plan.outcome != 'success')
        run: exit 1

      - name: Terraform Apply
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve