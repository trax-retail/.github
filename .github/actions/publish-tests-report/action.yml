name: 'Publish Tests Report'
description: 'Generates a report for tests results in TRX format'
inputs:
  trx_filter:
    required: false
    type: string
    default: './TestResults/*.trx'
  check_name:
    required: false
    type: string
    default: 'Test Results'
  comment_pr:
    required: false
    type: bool
  github-token:
    default: ${{ github.token }}
runs:
  using: "composite"
  steps:
    - name: Test Results
      uses: dorny/test-reporter@v1
      id: test-report
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: ${{ inputs.check_name }}
        path: ${{ inputs.trx_filter }}
        reporter: dotnet-trx

    - name: Prepare results for comment
      id: test-report-extra
      if: success() || failure()    # run this step even if previous step failed
      env:
          TIME_MS: ${{ steps.test-report.outputs.time }}
          PASSED: ${{ steps.test-report.outputs.passed }}
          FAILED: ${{ steps.test-report.outputs.failed }}
          SKIPPED: ${{ steps.test-report.outputs.skipped }}
      run: |
        echo ::set-output name=total::$(($PASSED + $FAILED + $SKIPPED))
        echo ::set-output name=time_s::$(($TIME_MS / 1000))
      shell: bash

    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && inputs.comment_pr == true
      env:
        COMMENT_BODY_ID: "<!-- test-report-comment-${{ inputs.check_name }} -->"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes(process.env.COMMENT_BODY_ID)
          })

          // 2. Prepare format of the comment
          const output = `${process.env.COMMENT_BODY_ID}
          ### Test Conclusion: \`${{ steps.test-report.outputs.conclusion }}\`
          ${{ steps.test-report-extra.outputs.time_s }}s [:stopwatch:](## "duration of all tests")
          ${{ steps.test-report-extra.outputs.total }} tests ${{ steps.test-report.outputs.passed }} [:heavy_check_mark:](## "passed tests") ${{ steps.test-report.outputs.skipped }} [:zzz:](## "skipped / disabled tests") ${{ steps.test-report.outputs.failed }} [:x:](## "failed tests")

          ---

          Results for commit ${{ github.sha }}.
          For more details on these failures, see [this check](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;

          // 3. If we have a comment, delete it and create a new one
          if (botComment) {
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id
            })
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })